{
    "collab_server" : "",
    "contents" : "#' Find differential expression genes or miRNAs from given expression data\n#'\n#' This function will apply one of three statistical methods, including t.test,\n#' wilcox.test and limma, to find differential expression genes or miRNAs with,\n#' discrete phenotype data, and then filter the genes or miRNAs (rows) which\n#' have bigger p-value than cutoff.\n#'\n#' @seealso \\code{\\link[stats]{t.test}} for Student's t-Test;\n#'    \\code{\\link[stats]{wilcox.test}} for Wilcoxon Rank Sum and Signed Rank\n#'    Tests.\n#'\n#' @return data expression data in matrix format, with sample name in columns and\n#'    gene symbol or miRNA name in rows.\n#'\n#' @param se \\code{\\link[SummarizedExperiment]{SummarizedExperiment}}\n#'    for input format.\n#' @param class string. Choose one features from all rows of phenotype data.\n#' @param method statistical method for finding differential genes or miRNAs,\n#'    including \"t.test\", \"wilcox.test\", \"limma\". Default is \"t.test\".\n#' @param limma.trend logical, only matter when limma is chosen to be the method.\n#'    From function \\code{\\link[limma]{eBayes}}.\n#' @param t_test.var logical, only matter when limma is chosen to be the method.\n#'    Whether to treat the two variances as being equal. From function\n#'    \\code{\\link[stats]{t.test}}\n#' @param log2 logical, if this data hasn't been log2 transformed yet, this one\n#'    should be TRUE. Default is FALSE.\n#' @param p_value.cutoff an numeric value indicating a threshold of p-value\n#'    for every genes or miRNAs (rows). Default is 0.05.\n#' @param p_adjust.method Correction method for multiple testing. (If you are\n#'    using DESeq for method, this param would not affect the result) From\n#'    function \\code{\\link[stats]{p.adjust}}. Default is \"BH\".\n#' @param foldchange an numeric value indicating a threshold of foldchange (log2)\n#'    for every genes or miRNAs (rows). Default is 0.5.\n#'\n#' @examples\n#' ## Use the internal dataset\n#' data(\"mirna\", package = \"anamiR\", envir = environment())\n#' data(\"pheno.mirna\", package = \"anamiR\", envir = environment())\n#'\n#' ## SummarizedExperiment class\n#' require(SummarizedExperiment)\n#' mirna_se <- SummarizedExperiment(\n#'  assays = SimpleList(counts=mirna),\n#'  colData = pheno.mirna)\n#'\n#' ## Finding differential miRNA from miRNA expression data with t.test\n#' mirna_d <- differExp_discrete(\n#'    se = mirna_se,\n#'    class = \"ER\",\n#'    method = \"t.test\"\n#' )\n#'\n#' @import stats\n#' @importFrom SummarizedExperiment colData\n#' @importFrom SummarizedExperiment assays\n#' @importFrom limma lmFit\n#' @importFrom limma makeContrasts\n#' @importFrom limma contrasts.fit\n#' @importFrom limma eBayes\n#' @importFrom DESeq2 DESeqDataSet\n#' @importFrom DESeq2 DESeq\n#' @importFrom DESeq2 results\n#' @export\ndifferExp_discrete <- function(\n  se,\n  class,\n  method = c(\"t.test\",\n             \"limma\",\n             \"wilcox.test\",\n             \"DESeq\"),\n  limma.trend = FALSE,\n  t_test.var = FALSE,\n  log2 = FALSE,\n  p_value.cutoff = 0.05,\n  p_adjust.method = \"BH\",\n  foldchange = 0.5\n) {\n\n  data <- SummarizedExperiment::assays(se)[[1]]\n\n  if (log2 %in% TRUE) {\n    data <- log2(data)\n  }\n\n  method <- match.arg(method)\n  pheno_data <- SummarizedExperiment::colData(se)[[class]]\n\n  if (!is.null(pheno_data)) {\n    pheno_data <- t(pheno_data)\n    # seperate group\n    if (method == \"limma\") {\n      group <- t(pheno_data)\n      type <- as.character(unique(unlist(group)))\n      levels(group)[levels(group) == type[1]] <- 0\n      levels(group)[levels(group) == type[2]] <- 1\n    }\n    group_1 <- which(pheno_data == levels(pheno_data)[1])\n    group_2 <- which(pheno_data == levels(pheno_data)[2])\n\n    #Fold Changes\n    foldchange_cal <- function(da, gp1, gp2) {\n      if (length(gp1) == 1) {\n        mean_gp1 <- da[, gp1]\n      } else {\n        mean_gp1 <- apply(da[, gp1], 1, mean)\n      }\n      if (length(gp2) == 1) {\n        mean_gp2 <- da[, gp2]\n      } else{\n        mean_gp2 <- apply(da[, gp2], 1, mean)\n      }\n      FC <- mean_gp1 - mean_gp2\n      return(FC)\n    }\n\n    if (method != \"DESeq\") {\n      FC <- foldchange_cal(data, group_1, group_2)\n      p_value <- vector(mode = \"numeric\", length = nrow(data))\n    }\n\n    # t.test\n    if (method == \"t.test\") {\n      t_test <- function (da, gp1, gp2) {\n        stats::t.test(da[gp1], da[gp2], var.equal = t_test.var)[[\"p.value\"]]\n      }\n      p_value <- apply(data, 1, t_test, group_1, group_2)\n    }\n\n    # wilcoxon\n    if (method == \"wilcox.test\") {\n      wilcoxon <- function (da, gp1, gp2) {\n        stats::wilcox.test(da[gp1], da[gp2])[[\"p.value\"]]\n      }\n      p_value <- apply(data, 1, wilcoxon, group_1, group_2)\n    }\n\n    # limma  (trend)\n    if (method == \"limma\") {\n      design <- stats::model.matrix(~ 0 + group)\n      fit <- limma::lmFit(data, design)\n      mc <- limma::makeContrasts(\"group0 - group1\", levels = design)\n      fit2 <- limma::contrasts.fit(fit, mc)\n      eb <- limma::eBayes(fit2, trend = limma.trend)\n      p_value <- eb[[\"p.value\"]]\n    }\n\n    #DESeq\n    if (method == \"DESeq\") {\n      tmp <- as.formula(paste(\"~\", class))\n      dds <- DESeq2::DESeqDataSet(se, design = tmp)\n      dds <- DESeq2::DESeq(dds)\n      res <- DESeq2::results(dds)\n      p_value <- res[[\"pvalue\"]]\n      p_adjust <- res[[\"padj\"]]\n      FC <- res[[\"log2FoldChange\"]]\n    }\n\n    # output\n    if (method != \"DESeq\") {\n      p_adjust <- stats::p.adjust(p = p_value, method = p_adjust.method)\n    }\n    idx <- which(p_adjust < p_value.cutoff)\n    DE_data <- data[idx, ]\n    DE_data <- cbind(DE_data, FC[idx], p_value[idx], p_adjust[idx])\n    len_col <- ncol(DE_data)\n    colnames(DE_data)[(len_col - 2):len_col] <- c(\"Fold-Change\",\n                                                  \"P-Value\",\n                                                  \"P-adjust\")\n    FC_rows <- abs(DE_data[, len_col - 2])\n    DE_data <- DE_data[which(FC_rows > foldchange), ]\n    return(DE_data)\n  }\n}\n",
    "created" : 1481776711813.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3531555155",
    "id" : "14F7AC52",
    "lastKnownWriteTime" : 1481776757,
    "last_content_update" : 1481776757576,
    "path" : "~/svn-pkg/anamiR/R/differExp_discrete.R",
    "project_path" : "R/differExp_discrete.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}