#' GSEA analysis is applied to given gene and miRNA expression data.
#'
#' This function will do GSEA analysis through the function
#' \code{\link[gage]{gage}}. After obtaining the ranking of
#' pathways, this function will choose the top five (default)
#' pathaways, and then find the related miRNAs based on their
#' gene set.
#'
#' @return list format containing both selected gene and miRNA
#'    expression data for each chosen pathway.
#'
#' @seealso \code{\link[gage]{gage}} for GSEA analysis.
#'
#' @param mrna differential expressed data in matrix format, with
#'    sample name in columns and gene symbol in rows, which is generated by
#'    \link{differExp_discrete} or \link{differExp_continuous}.
#' @param mirna differential expressed data in matrix format, with
#'    sample name in columns and miRNA in rows. miRNA should
#'    be miRBase 21 version now.
#' @param ref a numeric vector of column numbers for the reference
#'    condition or phenotype (i.e. the control group) in the exprs
#'    data matrix. Default ref = NULL, all columns are considered
#'    as target experiments. from \code{\link[gage]{gage}}
#' @param samp a numeric vector of column numbers for the target
#'    condition or phenotype (i.e. the experiment group) in the
#'    exprs data matrix. Default samp = NULL, all columns other
#'    than ref are considered as target experiments. from
#'    \code{\link[gage]{gage}}
#' @param eg2sym logical. conversion between Entrez Gene IDs
#'    and official gene symbols for human genes.
#' @param pathway_num The number of chosen pathways from the
#'    result of GSEA analysis.
#'
#' @examples
#'
#' require(data.table)
#'
#' ## Load example data
#' aa <- system.file("extdata", "GSE19536_mrna.csv", package = "anamiR")
#' mrna <- fread(aa, fill = TRUE, header = TRUE)
#'
#' bb <- system.file("extdata", "GSE19536_mirna.csv", package = "anamiR")
#' mirna <- fread(bb, fill = TRUE, header = TRUE)
#'
#' ## adjust data format
#' mirna_name <- as.matrix(mirna[, 1])
#' mrna_name <- as.matrix(mrna[, 1])
#' mirna <- mirna[, -1]
#' mrna <- mrna[, -1]
#' mirna <- data.matrix(mirna)
#' mrna <- data.matrix(mrna)
#' row.names(mirna) <- mirna_name
#' row.names(mrna) <- mrna_name
#'
#' table <- GSEA_ana(mrna = mrna, mirna = mirna, pathway_num = 2)
#'
#' @import gage
#' @import RMySQL
#' @importFrom S4Vectors head
#' @export
GSEA_ana <- function(
  mrna,
  mirna,
  ref = NULL,
  samp = NULL,
  eg2sym = TRUE,
  pathway_num = 5
) {

  if (eg2sym %in% TRUE ) {
    row.names(mrna) <- gage::sym2eg(row.names(mrna))
  }

  na_row <- which(is.na(row.names(mrna)))
  mrna <- mrna[-na_row, ]

  mrna_name <- gage::eg2sym(row.names(mrna))
  mirna_name <- row.names(mirna)

  kegg.p <- gage::gage(mrna, gsets = kegg.gs,
                       ref = ref, samp = samp)

  pathway <- S4Vectors::head(kegg.p$greater[, 1:pathway_num],
                  pathway_num)

  # connect with db
  db <- RMySQL::dbConnect(RMySQL::MySQL(), user = "visitor",
                          password = "visitor",
                          dbname = "visitor",
                          host = "anamir.cgm.ntu.edu.tw")
  gene_list <- c()
  mirna_list <- c()
  table <- list()

  for (i in seq_len(pathway_num)) {
    if (grepl("\\(", row.names(pathway)[i])) {
      pat <- strsplit(x = row.names(pathway)[i],
                      split = "\\(")[[1]][1]
      number <- grep(pat, names(kegg.gs))
    } else {
      number <- grep(row.names(pathway)[i], names(kegg.gs))
    }
    gset_id <- kegg.gs[[number]]
    gset_sym <- gage::eg2sym(gset_id)
    for (j in seq_len(length(gset_sym))) {
      gene <- gset_sym[j]
      query <- paste0("SELECT `miRNA_21`, `gene_symbol`
                      FROM `all_hsa` where gene_symbol like '",
                      gene, "' ;")
      tmp <- DBI::dbGetQuery(db, query)
      row_need <- which(tmp[["miRNA_21"]] %in% mirna_name ||
                          tmp[["gene_symbol"]] %in% mrna_name)
      tmp <- tmp[row_need, ]
      gene_list <- c(gene_list, tmp[["gene_symbol"]])
      mirna_list <- c(mirna_list, tmp[["miRNA_21"]])
    }
    mirna_list <- unique(mirna_list)
    gene_list <- unique(gene_list)

    mirow <- which(mirna_name %in% mirna_list)
    mrow <- which(mrna_name %in% gene_list)

    mirna_tmp <- mirna[mirow, ]
    mrna_tmp <- mrna[mrow, ]
    row.names(mrna_tmp) <- gage::eg2sym(row.names(mrna_tmp))

    table[[2 * i - 1]] <- mirna_tmp
    names(table)[[2 * i - 1]] <- paste(row.names(pathway)[i],
                                       "- mirna")
    table[[2 * i]] <- mrna_tmp
    names(table)[[2 * i]] <- paste(row.names(pathway)[i],
                                       "- mrna")
  }

  #disconnect db
  cons <- RMySQL::dbListConnections(RMySQL::MySQL())
  for (con in cons) RMySQL::dbDisconnect(con)

  return(table)
}
